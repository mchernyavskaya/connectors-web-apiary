swagger: '2.0'
info:
  version: '1.0'
  title: "connector-web-api"
  description: >-
    External Connector API is an API that stands between the EXternal Connector implementation
    and the Enterprise Search (Workplace Search). It is pull-based, meaning that there will be only GET
    methods in it, which will allow Workplace Search to pull content based on the schedule that
    Workplace Search implements and supports.
  license:
    name: MIT
    url: https://github.com/apiaryio/connector-web-api/blob/master/LICENSE
host: external.connector.api
basePath: /
schemes:
  - https
consumes:
  - application/json
produces:
  - application/json
securityDefinitions:
  ApiKeyAuth:
    type: apiKey
    in: header
    name: Authorization
  OAuth2:
    type: oauth2
    flow: accessCode
    authorizationUrl: https://example.com/oauth/authorize
    tokenUrl: https://example.com/oauth/token

security:
  - ApiKeyAuth: []
  - OAuth2: []

paths:
  /:
    x-summary: A root endpoint.
    get:
      summary: Returns the configuration and abilities of the connector.
      responses:
        200:
          description: A successful response.
          schema:
            $ref: '#/definitions/ConnectorConfigurationResponse'
      security: [] # unsecured
  /status:
    x-summary: Returns the status of the connector.
    get:
      summary: This endpoint is supposed to show both the status of the external connector, as well as the status of a third-party content provider.
      operationId: serviceStatus
      security: [] # unsecured
      responses:
        200:
          description: A JSON object describing the general service status and that of a third party content provider.
          schema:
            $ref: '#/definitions/ServiceStatusResponse'
          examples:
            {
              "status": "UP",
              "statusMessage": "I am up and running",
              "contentProviderStatus": "DOWN",
              "contentProviderStatusMessage": "Too many requests",
              "contentProviderStatusCode": "429"
            }
  /documents:
    x-summary: Provide a list of documents to index.
    post:
      summary: Provide a list of documents to index based on the input parameters.
      operationId: documentsList
      parameters:
        - $ref: '#/definitions/DocumentRequest'
      responses:
        200:
          description: A list of documents to index.
          schema:
            $ref: '#/definitions/DocumentListResponse'
          examples:
            withoutPermissions:
              {
                "results": [
                  {
                    "id": "so7mgSrdgRq+RJe0",
                    "publishedDate": "2022-02-03T13:46:55.648Z",
                    "type": "page",
                    "title": "Example Document",
                    "url": "https://www.example.com/somePath/example",
                    "body": "Example Domain\nThis domain is for use in illustrative examples in documents. You may use this domain in literature without prior coordination or asking for permission."
                  },
                    "download": [
                        "attachment_id_1",
                        "attachment_id_2"
                    ]
                ]
              }
            withPermissions:
              {
                "results": [
                  {
                    "id": "so7mgSrdgRq+RJe0",
                    "publishedDate": "2022-02-03T13:46:55.648Z",
                    "type": "page",
                    "title": "Example Document",
                    "url": "https://www.example.com/somePath/example",
                    "body": "Example Domain\nThis domain is for use in illustrative examples in documents. You may use this domain in literature without prior coordination or asking for permission.",
                    "allow_permissions": [
                        "john.doe@gmail.com"
                    ],
                    "deny_permissions": [
                        "jane.doe@gmail.com"
                    ]
                  }
                ],
                "errors": []
              }
            freeForm:
              {
                "results": [
                  {
                    "authorLastName": "Jane",
                    "authorFirstName": "Austen",
                    "isbn": "ISBN12345",
                    "publisher": "Penguin Books",
                    "publishYear": 1998,
                    "country": "UK",
                    "title": "Pride and Prejudice",
                    "rating": 5.0
                  }
                ],
                "errors": []
              }
        400:
          description: A generic error response.
          schema:
            $ref: '#/definitions/DocumentListResponse'
          examples:
            {
              "results": [ ],
              "errors": [
                {
                  "code": "CLIENT_CONNECT_FAILED",
                  "message": "I am a big fat error. So there. Oh yeah, and the client connection failed."
                }
              ]
            }
        401:
          description: Not authorized to use this resource.
        403:
          description: The access to this resource is forbidden.
        500:
          description: Internal server error.
  /documents/{id}:
    x-summary: Get a single document by its ID.
    get:
      summary: Get a single document by its unique ID.
      operationId: singleDocument
      parameters:
        - name: id
          type: string
          required: true
          in: path
          description: The unique ID by which a document can be identified.
      responses:
        200:
          description: A document in its JSON form.
          schema:
            $ref: '#/definitions/SingleDocumentResponse'
          examples:
            withAttachments:
              {
                "results": [
                  {
                    "id": "so7mgSrdgRq+RJe0",
                    "publishedDate": "2022-02-03T13:46:55.648Z",
                    "type": "page",
                    "title": "Example Document",
                    "url": "https://www.example.com/somePath/example",
                    "body": "Example Domain\nThis domain is for use in illustrative examples in documents. You may use this domain in literature without prior coordination or asking for permission."
                  },
                    "download": [
                        "attachment_id_1",
                        "attachment_id_2"
                    ]
                ]
              }
        400:
          description: A generic error response.
          schema:
            $ref: '#/definitions/SingleDocumentResponse'
          examples:
            {
              "result": null,
              "errors": [
                {
                  "code": "CLIENT_CONNECT_FAILED",
                  "message": "I am a big fat error. So there. Oh yeah, and the client connection failed."
                }
              ]
            }
        401:
          description: Not authorized to use this resource.
        403:
          description: The access to this resource is forbidden.
        500:
          description: Internal server error.

  /deleted:
    post:
      summary: Checks the list of document IDs and returns those that no longer exist in the source.
      operationId: checkDeletedIds
      parameters:
        - $ref: '#/definitions/DeletedIdsRequest'
      responses:
        200:
          description: The ids of deleted documents.
          schema:
            $ref: '#/definitions/DeletedIdsResponse'
          examples:
            {
              "results": [
                  "abcd"
              ],
              "errors": [ ]
            }
        400:
          description: A generic error response.
          schema:
            $ref: '#/definitions/DeletedIdsResponse'
          examples:
            {
              "results": null,
              "errors": [
                {
                  "code": "CLIENT_CONNECT_FAILED",
                  "message": "I am a big fat error. So there. Oh yeah, and the client connection failed."
                }
              ]
            }
        401:
          description: Not authorized to use this resource.
        403:
          description: The access to this resource is forbidden.
        500:
          description: Internal server error.

  /download:
    post:
      summary: Get a binary file using the data received in downloads for a document.
      operationId: getFile
      parameters:
        - $ref: '#/definitions/FileRequest'
      responses:
        200:
          description: Binary content.
          schema:
            $ref: '#/definitions/FileResponse'
        400:
          description: Errors list.
          schema:
            $ref: '#/definitions/ErrorResponse'
        401:
          description: Not authorized to use this resource.
        403:
          description: The access to this resource is forbidden.
        500:
          description: Internal server error.

  /schema:
    get:
      summary: Returns a schema definition for a connector.
      operationId: getSchema
      parameters: []
      responses:
        200:
          description: >-
            Connector mappings. It's a list of fields and data types for a
            document object.
          schema:
            $ref: '#/definitions/SchemaResponse'
          examples:
            {
              "schema": {
                "container": "text",
                "extension": "text",
                "created_at": "date",
                "project": "text",
                "description": "text",
                "title": "text",
                "body": "text",
                "type": "text",
                "slug": "text",
                "assigned_to": "text",
                "comments": "text",
                "issue": "text",
                "priority": "text",
                "created_by": "text",
                "url": "text",
                "size": "number",
                "mime_type": "text",
                "updated_by": "text",
                "status": "text"
              },
              "errors": [ ]
            }
        400:
          description: Errors list.
          schema:
            $ref: '#/definitions/ErrorResponse'
        401:
          description: Not authorized to use this resource.
        403:
          description: The access to this resource is forbidden.
        500:
          description: Internal server error.


definitions:
  ServiceStatusResponse:
    title: ServiceStatusResponse
    type: object
    properties:
      status:
        description: Whether the external connector service itself is UP or DOWN.
        $ref: '#/definitions/ServiceStatusEnum'
      statusMessage:
        description: A message explaining the status (if needed). Extra information about the application state.
        type: string
      contentProviderStatus:
        description: Whether the third-party service that provides the content is UP or DOWN.
        $ref: '#/definitions/ServiceStatusEnum'
      contentProviderStatusMessage:
        type: string
        description: A message explaining the status (if needed). Extra information about the service state.
      contentProviderStatusCode:
        type: string
        description: A status code from the content provider that explains its status data. May be an HTTP status; or can be something internal for the service.
    required:
      - status

  ConnectorConfigurationResponse:
    title: ConnectorConfigurationResponse
    type: object
    properties:
      description:
        type: string
    example:
      {
        "description": "You know, for pulling content for ingestion. Burp."
      }

  ServiceStatusEnum:
    title: ServiceStatusEnum
    type: string
    enum:
      - UP
      - DOWN

  DocumentListResponse:
    title: DocumentListResponse
    description: List of documents, exposed for ingestion.
    type: object
    properties:
      results:
        type: array
        items:
          $ref: '#/definitions/Document'
      errors:
        type: array
        minItems: 0
        items:
          $ref: '#/definitions/Error'

  SingleDocumentResponse:
    title: SingleDocumentResponse
    description: A single document, exposed for ingestion.
    type: object
    properties:
      result:
        $ref: '#/definitions/Document'
      errors:
        type: array
        minItems: 0
        items:
          $ref: '#/definitions/Error'

  Document:
    title: Document
    description: A document definition.
    type: object
    properties:
      id:
        type: string
        description: A unique ID of the document.
    required:
      - id
    additionalProperties: true

  DocumentRequest:
    title: DocumentRequest
    description: A document request.
    type: object
    properties:
      modifiedSince:
        type: string
        description: >-
          The modification date to be used as a lower limit for getting the documents. If omitted, should get
          the full list of documents available.
      timeoutMs:
        type: integer
        description: >-
          Timeout in milliseconds for the operation to end.
          On timing out, the client should either retry, or increase the timeout.
          default: 5000
    additionalProperties: false

  DeletedIdsRequest:
    title: DeletedIdsRequest
    description: JSON list of IDs to check for existence.
    type: object
    properties:
      ids:
        type: array
        description: >-
          JSON list of IDs to check for existence.
        items:
          minLength: 1
          type: string
    additionalProperties: false

  DeletedIdsResponse:
    title: DeletedIdsResponse
    description: IDs that no longer exist provided in a list of results, or a list of errors.
    type: object
    properties:
      results:
        type: array
        description: >-
          IDs that no longer exist in a third party content source.
        items:
          minLength: 1
          type: string
      errors:
        type: array
        items:
          $ref: '#/definitions/Error'
    additionalProperties: false

  FileRequest:
    title: FileRequest
    description: Whatever the connector sent in a download field on the document (not necessaryly JSON).
    type: string

  FileResponse:
    title: FileResponse
    description: Streams binary file content to the client (as multipart/form-data).
    type: string
    format: binary

  Error:
    title: Error
    description: An error with a code and error message. Both are strings to allow for more flexibility.
    properties:
      code:
        type: string
        default: SERVICE_ERROR
      message:
        type: string
    required:
      - code
      - message

  ErrorResponse:
    title: ErrorResponse
    description: A list of errors.
    type: object
    properties:
      errors:
        type: array
        items:
          $ref: '#/definitions/Error'
    additionalProperties: true

  SchemaResponse:
    title: SchemaResponse
    description: >-
      A list of mappings for documents that connector provides for ingestion, or a list of errors.
    type: object
    properties:
      schema:
        $ref: '#/definitions/SchemaObject'
      errors:
        type: array
        items:
          $ref: '#/definitions/Error'
    additionalProperties: false

  SchemaObject:
    title: SchemaObject
    description: A list of mappings for documents that connector provides for ingestion.
    properties: {}
    additionalProperties: true



